import scripts.settings as stngs
import bot_trading.lib.utilities.main_utilities as utl
import bot_trading.lib.tinkoff.tinkoff_main as tinkoffmain
import bot_trading.lib.db.db_main as dbmain
import bot_trading.lib.db.db_scripts as dbscripts
from datetime import datetime
import bot_trading.lib.trading.trading_main as trades
from sqlalchemy.orm import Session
from bot_trading.lib.db.db_main import DB_str_trading_simulate, engine


class Strategy:
    class Functions:
        def start_check(self):
            # time_now = utl.Utility.current_utc_time()
            # time_now = time.strftime("%H:%M:%S", time_now)
            # print(utl.Utility.current_utc_time())
            # print(utl.Utility.current_date())

            # –≤—ã–±–æ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

            # with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
            #     # self.qs_num_one = db.query(dbmain.DB_str_n_one).filter(dbmain.DB_str_n_one.ticker == self.ticker, dbmain.DB_str_n_one.date == utl.Utility.current_date()).first()
            #     # print(dbmain.DB_str_n_two.__dict__)
            #     # self.qs_num_two = db.query(dbmain.DB_str_n_two).filter(dbmain.DB_str_n_two.ticker == self.ticker,
            #     #                                                        dbmain.DB_str_n_two.date == utl.Utility.current_date()).first()
            #     self.qs_num_three = db.query(dbmain.DB_str_n_three).filter(dbmain.DB_str_n_three.ticker == self.ticker,
            #                                                            dbmain.DB_str_n_three.date == utl.Utility.current_date()).first()
            # –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∏–∫–µ—Ä–æ–º, —Ç–æ —Å–æ–∑–¥–∞—Ç—å –µ–µ
            # if not self.qs_num_one:
            #     # with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
            #     #     # print(db.query(dbmain.Signals).filter(dbmain.Signals.ticker == ticker).first().__dict__)
            #     #     query_signals = db.query(dbmain.Signals).filter(dbmain.Signals.ticker == self.ticker).first()
            #     #
            #     # level_in = query_signals.level_in
            #     # with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
            #     #     query = dbmain.DB_str_n_one(ticker=self.ticker, level_in=level_in, type_signal=query_signals.type_signal, last_update=utl.Utility.current_utc_time())
            #     #     db.add(query)
            #     #     db.commit()
            #     # # –≤—ã–±–æ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            #     # with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
            #     #     self.qs_num_one = db.query(dbmain.DB_str_n_one).filter(
            #     #         dbmain.DB_str_n_one.ticker == self.ticker).first()
            #     # return False # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–µ—Å—Å–∏–∏ —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            #     utl.Utility.otladka_print(txt="–°–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", lvl=0)
            #     return False
            if not self.qs_num_three:
                utl.Utility.otladka_print(txt="üî¥ –°–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", lvl=0, ticker=self.ticker)
                return False
            if not utl.UtilityStratagies.check_trading_only_at_session(stngs.Settings.Strategies.Strategy_num_three_settings.trading_only_at_session) :
                return False
            if not utl.UtilityStratagies.check_trading_period(stngs.Settings.Strategies.Strategy_num_three_settings.trading_period) :
                return False

            # if self.qs_num_one.last_update != None:
            #     self.timedif = utl.Utility.current_utc_time() - datetime.strptime(self.qs_num_one.last_update, "%Y-%m-%d %H:%M:%S.%f%z")
            #     self.timedif = self.timedif.seconds
            #     utl.Utility.otladka_print(txt=f"–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Å—Ç–∞–≤–ª–µ—Ç {self.timedif} —Å–µ–∫—É–Ω–¥", lvl=2)
            # else:
            #     self.timedif=999
            #     utl.Utility.otladka_print(
            #         txt=f"–ó–∞—à–µ–ª –≤ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª timedif=999", lvl=2)

            # if self.timedif < stngs.Settings.Strategies.Strategy_num_one_settings.dif_between_query:
            #     utl.Utility.otladka_print(
            #         txt=f"–ù–µ —Å—Ç–∞–ª –∑–∞—Ö–æ–¥–∏—Ç—å –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö",
            #         lvl=2)
            #     return False

            if self.qs_num_three.pass_reason:
                utl.Utility.otladka_print(txt=f"{self.rus_name} ({self.ticker}) –ë—É–º–∞–≥–∞ —É–∂–µ –≤—ã—à–ª–∞ –∏–∑ —Å–≤–æ–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", lvl=3, ticker=self.ticker)
                return False



            # if not self.utlstr.check_candle_by_minute(ccat, 7, 10, self.num_candle):
            #     return False

            utl.Utility.otladka_print(txt="–í—Å–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ", lvl=4, ticker=self.ticker)
            return True
        def strategy_num_three_delete_candles(self):
            if self.qs_num_three.level_name:
                for x in range(3):
                    for _ in [['candle_x' + str(x) + '_name', None],
                              ['candle_x' + str(x) + '_last_price', None],
                              ['candle_x' + str(x) + '_value', None],
                              ['candle_x' + str(x) + '_time', None],
                              ['candle_x' + str(x) + '_minute', None],
                              ['update_time', utl.Utility.current_utc_time()],
                              ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                              ]:
                        dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])

        def strategy_num_three_delete_level(self):
            if self.qs_num_three.level_name:

                for _ in [["level_name", None],
                          ["level_value", None],
                          ['update_time', utl.Utility.current_utc_time()],
                          ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                          ]:
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])

        def set_day_highlow(self):
            if (self.qs_num_three.day_high and self.qs_num_three.day_high < self.candle_high) or not self.qs_num_three.day_high:
                for _ in [["day_high", self.candle_high]
                          ]:
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                self.day_high = self.candle_high
            if (self.qs_num_three.day_low and self.qs_num_three.day_low > self.candle_low) or not self.qs_num_three.day_low:
                for _ in [["day_low", self.candle_low]
                          ]:
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                self.day_low = self.candle_low

    class Strategy_num_three:
        def main(self, ticker, candle_close=0, rus_name="", start_time="", candle_high=0, candle_low=0, minute=None, version=1):
            # ticker = ticker
            # candle_high = high
            # candle_low = low
            # candle_close = candle_close
            # rus_name = rus_name

            self.ticker = ticker
            self.rus_name = rus_name
            self.candle_high = candle_high
            self.candle_low = candle_low

            versions = {1: "–ü—Ä–æ—Ç–æ—Ä–≥–æ–≤–∫–∞ :: –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è", 2: "–ü—Ä–æ—Ç–æ—Ä–≥–æ–≤–∫–∞ 2 :: –ù–µ –±–æ–ª–µ–µ 1,2% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏"}
            versions_tlgm = {1: "‚Ññ1", 2: "‚Ññ2"}
            strategy_name = versions[version]

            utl.Utility.otladka_print(txt=f"–ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è \"{strategy_name}\"", lvl=3, ticker=ticker)
            utlstr = utl.UtilityStratagies

            with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
                self.qs_num_three = db.query(dbmain.DB_str_n_three).filter(
                    dbmain.DB_str_n_three.ticker == ticker,
                    dbmain.DB_str_n_three.date == utl.Utility.current_date(),
                    dbmain.DB_str_n_three.version == version,
                ).first()



            # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not Strategy.Functions.start_check(self):
                return False

            level_in = self.qs_num_three.level_in
            atr_out = stngs.Settings.Strategies.Strategy_num_three_settings.sbros_stratefii_atr_out
            atr_high = stngs.Settings.Strategies.Strategy_num_three_settings.sbros_stratefii_atr_high
            atr_low = stngs.Settings.Strategies.Strategy_num_three_settings.sbros_stratefii_atr_low
            cshet_kasaniy = stngs.Settings.Strategies.Strategy_num_three_settings.cshet_kasaniy

            ts = self.qs_num_three.type_signal
            max_level = self.qs_num_three.max_level
            min_level = self.qs_num_three.min_level
            ld = {}
            # level_dict = {"–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å" : "level_in", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 1" : "resistance1", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 2" : "resistance2", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1" : "support1", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2" : "support2"}
            level_dict = {"level_in": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "resistance1": "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 1",
                          "resistance2": "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 2", "support1": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1", "support2": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2"}

            koridor = 0
            napr = {"–õ–æ–Ω–≥": -1, "–®–æ—Ä—Ç": 1}
            step = self.qs_num_three.step

            level_names_dict = {-2: "support2", -1: "support1", 0: "level_in", 1: "resistance1",
                                2: "resistance2"}

            # if step:
            #     ld = {"–õ–æ–Ω–≥": [-2, -1, 0, 1], "–®–æ—Ä—Ç": [-1, 0, 1, 2]}
            #     # TODO –°–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –∫ –¥–∞–ª—å–Ω–∏–º —É—Ä–æ–≤–Ω—è–º
            # # elif not step
            # else:
            #     ld = {"–õ–æ–Ω–≥": [], "–®–æ—Ä—Ç": []}
            #     for key, value in level_names_dict:
            #         if value:
            #             # self.qs_num_three.__dict__[values]
            #             ld = {self.qs_num_three.__dict__[key]: self.qs_num_three.__dict__[value]}
            #
            #             # ld = {"–õ–æ–Ω–≥": [0], "–®–æ—Ä—Ç": [0]}
            #     step = 0





            if step:
                if ts == "–õ–æ–Ω–≥":
                    for x in range(-2,2):
                        ld[level_names_dict[x]] = level_in + step * x
                elif ts == "–®–æ—Ä—Ç":
                    for x in range(-1,3):
                        ld[level_names_dict[x]] = level_in + step * x
            else:
                step = 0
                levels = []
                for key, level_name_d in level_names_dict.items():
                    if self.qs_num_three.__dict__[level_name_d]:
                        # self.qs_num_three.__dict__[values]
                        ld[level_name_d] = self.qs_num_three.__dict__[level_name_d]
                        levels.append(self.qs_num_three.__dict__[level_name_d])

            current_level_number= -1

            # –ü–µ—Ä–µ–±–æ—Ä —É—Ä–æ–≤–Ω–µ–π –≤ —Ü–∏–∫–ª–µ
            for level_eng_name_c, level_value_c in ld.items():
                current_level_number+= 1
                level_name = level_eng_name_c

                utl.Utility.otladka_print(txt=f"{self.rus_name} ({self.ticker}) —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å {level_name}",
                                          lvl=8, ticker=self.ticker)

                if not self.qs_num_three.candle_x1_name:
                    atr_in = atr_high
                else:
                    atr_in = atr_low

                # —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è
                current_level_value = level_value_c
                # –≠—Ç–æ –∞—Ç—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –±–∞—Ä–∞ –¥–ª—è –ø—Ä–æ—Ç–æ—Ä–≥–æ–≤–∫–∏
                base_border = current_level_value * (1 + atr_in / 100 * napr[ts])
                # –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª—É—á–∞–µ–≤ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª —Ä–∞–≤–µ–Ω 1% –≤ –≤–∏–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∞ –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                base_out = current_level_value * (1 + atr_out / 100 * napr[ts])

                if step:
                    # –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–º–∏–π —É—Ä–æ–≤–Ω–∏ (–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è), –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä —à–∞–≥–∞ —É—Ä–æ–≤–Ω–µ–π step
                    upper_level = current_level_value + step
                    bottom_level = current_level_value - step

                    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É
                    if ts == "–õ–æ–Ω–≥":
                        if current_level_number == len(ld):
                            # upper_level = current_level_value * 2
                            bottom_level = current_level_value * 0.1
                    elif ts == "–®–æ—Ä—Ç":
                        if current_level_number + 1 == len(ld):
                            # bottom_level = current_level_value * 0.1
                            upper_level = current_level_value * 2
                else:
                    if current_level_number + 1 < len(levels):
                        upper_level = levels[current_level_number + 1]
                    else:
                        upper_level = current_level_value*2
                        # upper_level = current_level_value * 1.01
                    if current_level_number - 1 >= 0:
                        bottom_level = levels[current_level_number - 1]
                    else:
                        bottom_level = current_level_value * 0.1
                        # bottom_level = current_level_value * 0.99

                self.day_high = self.qs_num_three.day_high
                self.day_low = self.qs_num_three.day_low

                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞ –∏ –º–∏–Ω–∏–º—É–º–∞ –¥–Ω—è
                Strategy.Functions.set_day_highlow(self)



                level_shots = self.qs_num_three.__dict__[level_name + "_shot"]

                # –¶–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–ª–∞ —É—Ä–æ–≤–µ–Ω—å
                if candle_low < current_level_value < candle_high:
                    level_shots += 1
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, level_name + "_shot",
                                                   self.qs_num_three.__dict__[level_name + "_shot"] + 1)

                    utl.Utility.otladka_print(
                                              txt=f"–¶–µ–Ω–∞ –∫–∞—Å–Ω—É–ª–∞—Å—å ({self.qs_num_three.__dict__[level_name + '_shot'] + 1} —Ä–∞–∑) —É—Ä–æ–≤–Ω—è {level_dict[level_name]}",
                                              lvl=4, ticker=ticker)

                    Strategy.Functions.strategy_num_three_delete_candles(self)

                    # if level_name == "resistance1" and level_shots == 1:
                    #     max_level =

                    # return False



                # book –¶–µ–Ω–∞ —É—à–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0.9% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏
                # if version == 2:
                if (ts == "–õ–æ–Ω–≥" and self.day_high / level_in > (1 + 0.009)) or\
                    (ts == "–®–æ—Ä—Ç" and self.day_low / level_in < (1 - 0.009)):
                    for _ in [
                              ['update_time', utl.Utility.current_utc_time()],
                              ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                                ['pass_reason', "–í—ã–∫–ª—é—á–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç.–∫. –¶–µ–Ω–∞ —É—à–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1,2% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏"],
                                ['pass_reason_time', utl.Utility.current_utc_time()],
                                ['pass_reason_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                                ['pass_reason_last_price', candle_close]
                              ]:
                        dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                    return False

                # –¶–µ–Ω–∞ —É—à–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0,9% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏
                # if step and min_level < 0 and self.day_low < level_in + step < self.day_high:
                # if level_name == "resistance1" and level_shots > 0 and min_level < 0:
                #     for _ in [
                #         ['min_level', 0],
                #         ['update_time', utl.Utility.current_utc_time()],
                #         ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))]
                #     ]:
                #         dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                #     min_level = 0
                #
                # if (ts == "–õ–æ–Ω–≥" and self.day_high / level_in >= (1 + 0.009)) or\
                #     (ts == "–®–æ—Ä—Ç" and self.day_low / level_in <= (1 - 0.009)):
                #
                #     if step:
                #         if ts == "–õ–æ–Ω–≥":
                #
                #
                #     for _ in [
                #               ['update_time', utl.Utility.current_utc_time()],
                #               ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                #                 ['pass_reason', "–í—ã–∫–ª—é—á–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç.–∫. –¶–µ–Ω–∞ —É—à–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1,2% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏"],
                #                 ['pass_reason_time', utl.Utility.current_utc_time()],
                #                 ['pass_reason_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                #                 ['pass_reason_last_price', candle_close]
                #               ]:
                #         dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                #     return False


                # new –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∫–∞—Å–Ω—É–ª–∞—Å—å 1/4 —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫—É –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ, —Ç–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ 1/4. –ü–ª—é—Å —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è 25.04.23
                # if step and (\
                #         (ts == "–õ–æ–Ω–≥" and max_level==1 and min_level<0 and day_low > (level_in-step) and day_high > (level_in+step)) or \
                #         (ts == "–®–æ—Ä—Ç" and max_level==-1 and min_level>0 and day_high < (level_in+step) and day_low < (level_in-step))\
                #         ):
                #     for _ in [
                #         ["min_level", 0]
                #     ]:
                #         dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                #     min_level = 0


                # book –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ü–µ–Ω–∞
                if (ts == "–õ–æ–Ω–≥" and not (bottom_level < candle_close < current_level_value)) or\
                    (ts == "–®–æ—Ä—Ç" and not (current_level_value < candle_close < upper_level)):
                    continue

                for _ in [
                    ['last_price', candle_close],
                    ['update_time', utl.Utility.current_utc_time()],
                    ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))]
                ]:
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])

                # new –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –ø—Ä–æ—Ç–∏–≤ —Å–¥–µ–ª–∫–∏ –¥–∞–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, —Ç–æ? 25.04.23
                # if (ts == "–õ–æ–Ω–≥" and current_level_number < min_level) or (ts == "–®–æ—Ä—Ç" and current_level_number > min_level):
                #     pass

                # book –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —Å—Ö–æ–¥–∏–ª–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –¥–∞–ª–µ–∫–æ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞
                if ts == "–õ–æ–Ω–≥":
                    for key, value in level_names_dict.items():
                        if value == level_name:

                            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
                            if key < 0 and key < max_level - 1:
                                max_level = key + 1
                                # print(f"max_level = {max_level}")
                                for _ in [
                                            ["max_level", max_level]
                                          ]:
                                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])

                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —Å—Ö–æ–¥–∏–ª–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –¥–∞–ª–µ–∫–æ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞
                            if key > max_level:
                                utl.Utility.otladka_print(
                                    txt=f"{rus_name} ({ticker}) –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å \"{level_dict[level_name]}\", —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —Å—Ö–æ–¥–∏–ª–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –¥–∞–ª–µ–∫–æ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞",
                                    lvl=2,
                                    ticker=ticker)
                                Strategy.Functions.strategy_num_three_delete_candles(self)
                                Strategy.Functions.strategy_num_three_delete_level(self)
                                return False
                            break
                elif ts == "–®–æ—Ä—Ç":
                    for key, value in level_names_dict.items():
                        if value == level_name:
                            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
                            if key > 0 and key > max_level + 1:
                                max_level = key - 1
                                for _ in [["max_level", max_level]
                                          ]:
                                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —Å—Ö–æ–¥–∏–ª–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –¥–∞–ª–µ–∫–æ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞
                            if key < max_level:
                                utl.Utility.otladka_print(
                                    txt=f"{rus_name} ({ticker}) –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å \"{level_dict[level_name]}\", —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —Å—Ö–æ–¥–∏–ª–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –¥–∞–ª–µ–∫–æ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞",
                                    lvl=2,
                                    ticker=ticker)
                                Strategy.Functions.strategy_num_three_delete_candles(self)
                                Strategy.Functions.strategy_num_three_delete_level(self)
                                return False
                            break
                    # if level_names_dict[]

                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 2—É—Ö —Ä–∞–∑ –∫–∞—Å–Ω—É–ª–∞—Å—å —É—Ä–æ–≤–Ω—è, —Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                # TODO –ï—Å–ª–∏ –±—É–¥—É —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ç–æ –ø–æ–º–µ–Ω—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –∫ –±–∞–∑–µ, –∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—Å—è –≤ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                # if self.qs_num_three.__dict__[level_name + "_shot"] > 1 and cshet_kasaniy:
                #     utl.Utility.otladka_print(
                #                               txt=f"–¶–µ–Ω–∞ –∫–∞—Å–Ω—É–ª–∞—Å—å ({self.qs_num_three.__dict__[level_name + '_shot']} —Ä–∞–∑) —É—Ä–æ–≤–Ω—è {level_dict[level_name]}. –≠—Ç–æ –ø—Ä–µ–¥–µ–ª. –ò–¥–µ—Ç —Ä–∞—Å–ø–∏–ª —É—Ä–æ–≤–Ω—è. –ë–æ–ª—å—à–µ –∑–∞ —ç—Ç–∏–º —É—Ä–æ–≤–Ω–µ–º –Ω–µ —Å–ª–µ–∂—É.",
                #                               lvl=3, ticker=ticker)
                #     Strategy.Functions.strategy_num_three_delete_candles(self)
                #     Strategy.Functions.strategy_num_three_delete_level(self)
                #     return False

                # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
                if not self.qs_num_three.level_name:
                    utl.Utility.otladka_print(
                        txt=f"{rus_name} ({ticker}) –ù–∞–±–ª—é–¥–∞—é –∑–∞ –ø–µ—Ä–≤–∏—á–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º \"{level_dict[level_name]}\" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º \"{current_level_value}\"", lvl=2,
                        ticker=ticker)
                    for _ in [["level_name", level_name],
                              ["level_value", current_level_value]
                              ]:
                        dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])

                # –ò–∑–º–µ–Ω–∏–ª—Å—è —É—Ä–æ–≤–µ–Ω—å
                if self.qs_num_three.level_name and self.qs_num_three.level_name != level_name:
                    # TODO –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º—Ç–∏–Ω–æ–π –∑–∞—è–≤–∫–∏ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–∫–∏—Ö –µ—â–µ –º–µ—Å—Ç–∞—Ö –Ω—É–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å)
                    utl.Utility.otladka_print(
                        txt=f"{rus_name} ({ticker}) –ò–∑–º–µ–Ω–∏–ª—Å—è —É—Ä–æ–≤–µ–Ω—å —Å \"{level_dict[self.qs_num_three.level_name]}\" –Ω–∞ \"{level_dict[level_name]}\" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º \"{current_level_value}\"",
                        lvl=2,
                        ticker=ticker)
                    Strategy.Functions.strategy_num_three_delete_candles(self)
                    Strategy.Functions.strategy_num_three_delete_level(self)
                    for _ in [["level_name", level_name],
                              ["level_value", current_level_value]
                              ]:
                        dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                    with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
                        self.qs_num_three = db.query(dbmain.DB_str_n_three).filter(
                            dbmain.DB_str_n_three.ticker == ticker,
                            dbmain.DB_str_n_three.date == utl.Utility.current_date(),
                            dbmain.DB_str_n_three.version == version
                        ).first()

                # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –±–æ–ª—å—à–µ 3–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
                # if self.qs_num_three.__dict__[level_name + '_reminder'] >= 3:
                #    utl.Utility.otladka_print(
                #        txt=f"–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–∂–µ –±—ã–ª–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {self.qs_num_three.__dict__[level_name + '_reminder']} —Ä–∞–∑. –ü—Ä–µ–∫—Ä–∞—â–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ—Ç —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è",
                #        lvl=2, ticker=ticker)
                #    return False

                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ delta price
                if self.qs_num_three.type_signal == "–õ–æ–Ω–≥":
                    delta_price = 100 * ((candle_close - current_level_value) / candle_close)
                elif self.qs_num_three.type_signal == "–®–æ—Ä—Ç":
                    delta_price = 100 * (
                                (current_level_value - candle_close) / current_level_value)
                delta_price = float('{:.2f}'.format(delta_price))
                for _ in [['delta_price', delta_price]
                          ]:
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])

                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –æ—Ç –õ–Æ–ë–û–ì–û –£–†–û–í–ù–Ø (–ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –±–æ–ª—å—à–µ —á–µ–º 1,2%) –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1,2%, —Ç–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                # if delta_price <= -1.2:
                #     for _ in [
                #         ['update_time', utl.Utility.current_utc_time()],
                #         ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                #         ['pass_reason',
                #          "–í—ã–∫–ª—é—á–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç.–∫. –¶–µ–Ω–∞ —É—à–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1,2% –æ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ç–∏–≤ —Å–¥–µ–ª–∫–∏"],
                #         ['pass_reason_time', utl.Utility.current_utc_time()],
                #         ['pass_reason_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                #         ['pass_reason_last_price', candle_close]
                #     ]:
                #         dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                #     return False


                # –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ –≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—Ü—ã 1–∞—è —Å–≤–µ—á–∞
                if (minute % 5 == 0 or stngs.Settings.Strategies.StrategiesMain.candle_period == 5) and not self.qs_num_three.candle_x1_name:
                    if (
                            ts == "–õ–æ–Ω–≥" and base_border <= candle_high <= current_level_value and base_border <= candle_low <= current_level_value) or \
                            (
                                    ts == "–®–æ—Ä—Ç" and  current_level_value <= candle_high <= base_border and current_level_value <= candle_low <= base_border)\
                            :
                        utl.Utility.otladka_print(
                            txt=f"–ü–µ—Ä–≤—ã–π –±–∞—Ä –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ –æ–∫–æ–ª–æ —É—Ä–æ–≤–Ω—è \"{level_dict[level_name]}\" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º \"{current_level_value}\"",
                            lvl=2, ticker=ticker)
                        for _ in [['candle_x1_name', level_name],
                                  ['candle_x1_value', current_level_value],
                                  ['candle_x1_last_price', candle_close],
                                  ['candle_x1_time', utl.Utility.current_utc_time()],
                                  ['candle_x1_minute', int(utl.Utility.current_utc_time().strftime("%M"))]
                                  ]:
                            dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                        return False

                # –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ –≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—Ü—ã 2–∞—è —Å–≤–µ—á–∞
                # TODO –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ minute % 5 == 4 –∫–æ–≥–¥–∞ –±—É–¥—É —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–Ω—É—Ç–∫–∏
                if (minute % 5 == 4 or stngs.Settings.Strategies.StrategiesMain.candle_period == 5) and self.qs_num_three.candle_x1_name and not self.qs_num_three.candle_x2_name:

                    # –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ –≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—Ü—ã
                    if (ts == "–õ–æ–Ω–≥" and base_border <= candle_high <= current_level_value and base_border <= candle_low <= current_level_value) or \
                            (ts == "–®–æ—Ä—Ç" and current_level_value <= candle_high <= base_border and current_level_value <= candle_low <= base_border)\
                            :
                        utl.Utility.otladka_print(
                            txt=f"–í—Ç–æ—Ä–æ–π –±–∞—Ä –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ \"{level_dict[level_name]}\" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º \"{current_level_value}\".",
                            lvl=2, ticker=ticker)

                        type_round = {"–õ–æ–Ω–≥": "üü¢", "–®–æ—Ä—Ç": "üî¥"}
                        type_move = {"–õ–æ–Ω–≥": "—Å–Ω–∏–∑—É-–≤–≤–µ—Ä—Ö üîº", "–®–æ—Ä—Ç": "—Å–≤–µ—Ä—Ö—É-–≤–Ω–∏–∑ üîΩ"}
                        type_move2 = {"–õ–æ–Ω–≥": "–†–∞—Å—Ç–µ—Ç", "–®–æ—Ä—Ç": "–ü–∞–¥–∞–µ—Ç"}
                        type_bolee = {"–õ–æ–Ω–≥": "–º–µ–Ω–µ–µ", "–®–æ—Ä—Ç": "–±–æ–ª–µ–µ"}
                        type_move_short = {"–õ–æ–Ω–≥": "üîº", "–®–æ—Ä—Ç": "üîΩ"}

                        # TODO –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        msg = f"<b>{rus_name} ({ticker}) :: {self.qs_num_three.type_signal} {type_round[self.qs_num_three.type_signal]}</b>\n" \
                              f"<b>{versions_tlgm[version]}</b>\n\n" \
                              f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {candle_close} {type_move_short[self.qs_num_three.type_signal]}</b>\n" \
                              f"<u>{type_move2[self.qs_num_three.type_signal]}</u> –∫ —É—Ä–æ–≤–Ω—é: {self.qs_num_three.level_value}\n" \
                              f"____________________________\n" \
                              f"<i>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–¥–µ–ª–∫–µ –≤ {self.qs_num_three.type_signal.lower()}.</i>\n" \
                              f"<i>–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: {float('{:.2f}'.format((self.qs_num_three.level_value * (1 + (0.003 * napr[self.qs_num_three.type_signal])))))}</i>\n"\
                              f"<i>* -0,3% –æ—Ç —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–∏—Ç–∏—è</i>"
                            # f"<i>–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.</i>\n\n" \
                            # f"<i>–°—Ç–æ–ø –ª–æ—Å—Å –Ω–µ {type_bolee[self.qs_num_three.type_signal]}: {float('{:.2f}'.format((self.qs_num_three.level_value * (1 + (0.003 * napr[self.qs_num_three.type_signal])))))} (0,3% –æ—Ç —É—Ä–æ–≤–Ω—è)</i>\n\n"

                        print(msg)

                        if not utl.Utility.send_msg_to_group(msg):
                            utl.Utility.otladka_print(
                                                      txt=f"üî¥üî¥üî¥üî¥ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
                                                      lvl=0, ticker=ticker)

                        for _ in [['candle_x2_name', self.qs_num_three.level_name],
                                  ['candle_x2_value', current_level_value],
                                  ['candle_x2_last_price', candle_close],
                                  ['candle_x2_time', utl.Utility.current_utc_time()],
                                  ['candle_x2_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                                  [level_name + '_reminder', self.qs_num_three.__dict__[level_name + '_reminder'] + 1]
                                  ]:
                            dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])

                        obj_strategy_simulate_trading = trades.TradingSimulate()
                        obj_strategy_simulate_trading.main(ticker=ticker,
                                                           candle_close=candle_close,
                                                           candle_high=candle_high,
                                                           candle_low=candle_low,
                                                           rus_name=rus_name, minute=minute, start=1, strategy_name=strategy_name, version=version)

                        return False
                    elif (
                            ts == "–õ–æ–Ω–≥" and candle_high <= current_level_value and candle_low < base_border) or \
                            (
                                    ts == "–®–æ—Ä—Ç" and current_level_value <= candle_high <= base_border and candle_low > current_level_value) \
                            :
                        utl.Utility.otladka_print(
                            txt=f"–í—Ç–æ—Ä–∞—è —Å–≤–µ—á–∞ –≤—ã—à–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ—Ä–∏–¥–æ—Ä–∞. –ñ–¥—É –Ω–æ–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ—Ä–∏–¥–æ—Ä",
                            lvl=2, ticker=ticker)
                        Strategy.Functions.strategy_num_three_delete_candles(self)
                        return False

                # –í—ã—à–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ê–¢–† –∏ –æ–±–Ω—É–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                if (ts == "–õ–æ–Ω–≥" and candle_low < base_out) or \
                        (ts == "–®–æ—Ä—Ç" and candle_high > base_out)\
                        :
                    utl.Utility.otladka_print(
                        txt=f"–¶–µ–Ω–∞ –≤–Ω–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞. –ü—Ä–µ–∫—Ä–∞—â–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—Ä–æ–≤–Ω–µ–º. –ñ–¥—É –Ω–æ–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ—Ä–∏–¥–æ—Ä –∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
                        lvl=3, ticker=ticker)

                    Strategy.Functions.strategy_num_three_delete_candles(self)
                    Strategy.Functions.strategy_num_three_delete_level(self)

                    # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–ª—é—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ê–¢–†, —Ç–æ –≤—ã–∫–ª—é—á–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    if (ts == "–õ–æ–Ω–≥" and current_level_number == 0) or (ts == "–®–æ—Ä—Ç" and current_level_number + 1 == len(ld)):
                        utl.Utility.otladka_print(
                            txt=f"–í—ã–∫–ª—é—á–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç.–∫. –¶–µ–Ω–∞ —É—à–ª–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ê–¢–† –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏",
                            lvl=3, ticker=ticker)

                        for _ in [
                            ['update_time', utl.Utility.current_utc_time()],
                            ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                            ['pass_reason',
                             "–í—ã–∫–ª—é—á–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç.–∫. –¶–µ–Ω–∞ —É—à–ª–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ê–¢–† –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏"],
                            ['pass_reason_time', utl.Utility.current_utc_time()],
                            ['pass_reason_minute', int(utl.Utility.current_utc_time().strftime("%M"))],
                            ['pass_reason_last_price', candle_close]
                        ]:
                            dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                        return False
                    return False

                # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                if candle_low < current_level_value < candle_high:
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, level_name + "_shot",
                                                   self.qs_num_three.__dict__[level_name + "_shot"] + 1)

                    utl.Utility.otladka_print(
                                              txt=f"–¶–µ–Ω–∞ –∫–∞—Å–Ω—É–ª–∞—Å—å ({self.qs_num_three.__dict__[level_name + '_shot']+1} —Ä–∞–∑) —É—Ä–æ–≤–Ω—è {level_dict[level_name]}",
                                              lvl=2, ticker=ticker)

                    Strategy.Functions.strategy_num_three_delete_candles(self)
                    return False
                return False
            # –¶–µ–Ω–∞ —É—à–ª–∞ –¥–∞–ª–µ–∫–æ –æ—Ç –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π. –ü—Ä–µ–∫—Ä–∞—â–∞—é –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —É—Ä–æ–≤–Ω—è–º–∏.
            else:
                utl.Utility.otladka_print(
                    txt=f"–¶–µ–Ω–∞ —É—à–ª–∞ –¥–∞–ª–µ–∫–æ –æ—Ç –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π. –ü—Ä–µ–∫—Ä–∞—â–∞—é –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —É—Ä–æ–≤–Ω—è–º–∏.",
                    lvl=3, ticker=ticker)
                Strategy.Functions.strategy_num_three_delete_candles(self)
                Strategy.Functions.strategy_num_three_delete_level(self)
                for _ in [
                          ["last_price", candle_close],
                        ['update_time', utl.Utility.current_utc_time()],
                        ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))]
                          ]:
                    dbscripts.db_update_cell_by_id(dbmain.DB_str_n_three, self.qs_num_three.id, _[0], _[1])
                return False

# class TradingSimulate:
#     def main(self, ticker, candle_close=0, rus_name="", start_time="", high=0, low=0, minute=None, start=0, strategy_name=""):
# 
#         # with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#         #     qs_tickers_for_trading = db.query(dbmain.DB_str_n_three).filter(
#         #         dbmain.DB_str_n_three.candle_x2_name != None,
#         #         dbmain.DB_str_n_three.date == utl.Utility.current_date(),
#         #         dbmain.DB_str_n_three.ticker == ticker).first()
#         #
#         # with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#         #     qs_ticker_for_trading = db.query(dbmain.DB_str_trading_simulate).filter(
#         #         dbmain.DB_str_trading_simulate.date == utl.Utility.current_date(),
#         #         dbmain.DB_str_trading_simulate.ticker == ticker,
#         #         dbmain.DB_str_trading_simulate.stop_loss_value == None
#         #
#         #     ).first()
# 
#         utl.Utility.otladka_print(
#             txt=f"{rus_name} ({ticker}) –ó–∞—à–µ–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏",
#             lvl=4,
#             ticker=ticker)
# 
#         if start == 1:
# 
#             utl.Utility.otladka_print(
#                 txt=f"{rus_name} ({ticker}) –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏",
#                 lvl=3,
#                 ticker=ticker)
# 
#             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
#             with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#                 qs_str_n_three = db.query(dbmain.DB_str_n_three).filter(
#                     dbmain.DB_str_n_three.candle_x2_name != None,
#                     dbmain.DB_str_n_three.date == utl.Utility.current_date(),
#                     dbmain.DB_str_n_three.ticker == ticker).first()
# 
# 
#             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –Ω–æ –Ω–µ –±—ã–ª–æ –≤—Ö–æ–¥–∞. –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É
#             with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#                 qs_ticker_for_trading_2 = db.query(dbmain.DB_str_trading_simulate).filter(
#                     dbmain.DB_str_trading_simulate.date == utl.Utility.current_date(),
#                     dbmain.DB_str_trading_simulate.ticker == ticker,
#                     dbmain.DB_str_trading_simulate.trade_out_value == None,
#                     dbmain.DB_str_trading_simulate.trade_in_value == None
#                 ).first()
#             if qs_ticker_for_trading_2:
#                 utl.Utility.otladka_print(
#                     txt=f"{rus_name} ({ticker}) –ï—Å—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –Ω–æ –Ω–µ –±—ã–ª–æ –≤—Ö–æ–¥–∞. –£–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É",
#                     lvl=3,
#                     ticker=ticker)
#                 db.delete(qs_ticker_for_trading_2)
#                 db.commit()
# 
#             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â—É—é—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
#             with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#                 qs_ticker_for_trading = db.query(dbmain.DB_str_trading_simulate).filter(
#                     dbmain.DB_str_trading_simulate.date == utl.Utility.current_date(),
#                     dbmain.DB_str_trading_simulate.ticker == ticker,
#                     dbmain.DB_str_trading_simulate.trade_out_value == None,
#                     dbmain.DB_str_trading_simulate.trade_in_value != None
#                 ).first()
# 
#             # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–∏–≥–Ω–∞–ª –Ω–∞ —Ç–æ—Ç –∂–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–¥–µ–ª–∫–µ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–∏–≥–Ω–∞–ª—É
#             if qs_ticker_for_trading and qs_str_n_three.candle_x2_name and qs_ticker_for_trading.strategy_level_name \
#                     and qs_str_n_three.candle_x2_name == qs_ticker_for_trading.strategy_level_name \
#                     and qs_ticker_for_trading.trade_in_value != None \
#                     and qs_ticker_for_trading.trade_out_value == None:
#                 utl.Utility.otladka_print(
#                     txt=f"{rus_name} ({ticker}) –°–∏–≥–Ω–∞–ª –ø—Ä–∏—à–µ–ª —Å–∏–≥–Ω–∞–ª –Ω–∞ —Ç–æ—Ç –∂–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–¥–µ–ª–∫–µ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–∏–≥–Ω–∞–ª—É.",
#                     lvl=3,
#                     ticker=ticker)
#                 return False
# 
#             # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–∏–≥–Ω–∞–ª –Ω–∞ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–¥–µ–ª–∫–µ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–∏–≥–Ω–∞–ª—É. –¢–æ –µ—Å—Ç—å –ø–æ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–º—É
#             # print(f"{qs_str_n_three.candle_x2_name}")
#             # print(qs_str_n_three.candle_x2_name != qs_ticker_for_trading.strategy_level_name)
#             # print(qs_ticker_for_trading.trade_in_value)
#             # print(qs_ticker_for_trading.trade_out_value)
# 
#             if qs_str_n_three.candle_x2_name and qs_ticker_for_trading \
#                     and qs_str_n_three.candle_x2_name != qs_ticker_for_trading.strategy_level_name \
#                     and qs_ticker_for_trading.trade_in_value \
#                     and not qs_ticker_for_trading.trade_out_value \
#                     :
#                 utl.Utility.otladka_print(
#                     txt=f"{rus_name} ({ticker}) –°–∏–≥–Ω–∞–ª –ø—Ä–∏—à–µ–ª –Ω–∞ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–¥–µ–ª–∫–µ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–∏–≥–Ω–∞–ª—É. –¢–æ –µ—Å—Ç—å –ø–æ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–º—É. –¢–∞–∫ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è—é —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É.",
#                     lvl=3,
#                     ticker=ticker)
#                 return False
# 
#             # –ó–∞–π—Ç–∏ –µ—â–µ —Ä–∞–∑ –≤ —Å–¥–µ–ª–∫—É –µ—Å–ª–∏ –ø–æ —ç—Ç–æ–º—É –∂–µ —É—Ä–æ–≤–Ω—é —É–∂–µ, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–∏–ª —Å—Ç–æ–ø –ª–æ—Å—Å
#             if qs_str_n_three.candle_x2_name and qs_ticker_for_trading\
#                     and qs_str_n_three.candle_x2_name == qs_ticker_for_trading.strategy_level_name \
#                     and qs_ticker_for_trading.trade_in_value \
#                     and qs_ticker_for_trading.trade_out_value \
#                     :
#                 utl.Utility.otladka_print(
#                     txt=f"{rus_name} ({ticker}) –ó–∞—à–µ–ª –µ—â–µ —Ä–∞–∑ –≤ —Å–¥–µ–ª–∫—É –µ—Å–ª–∏ –ø–æ —ç—Ç–æ–º—É –∂–µ —É—Ä–æ–≤–Ω—é —É–∂–µ, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–∏–ª —Å—Ç–æ–ø –ª–æ—Å—Å.",
#                     lvl=3,
#                     ticker=ticker)
#                 pass
# 
#             if (
#                     qs_str_n_three.candle_x2_name and qs_ticker_for_trading \
#                     and qs_str_n_three.candle_x2_name == qs_ticker_for_trading.strategy_level_name \
#                     and qs_ticker_for_trading.trade_in_value \
#                     and qs_ticker_for_trading.trade_out_value \
#                     ) \
#                     or not qs_ticker_for_trading:
# 
#                 # if qs_ticker_for_trading:
#                 level_dict = {"level_in": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "resistance1": "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 1",
#                               "resistance2": "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 2", "support1": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1", "support2": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2"}
#                 utl.Utility.otladka_print(
#                     txt=f"{rus_name} ({ticker}) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç —É—Ä–æ–≤–Ω—è \"{level_dict[qs_str_n_three.candle_x2_name]}\"",
#                     lvl=2,
#                     ticker=ticker)
#                 data = {}
# 
#                 data["date"] = utl.Utility.current_date()
#                 data["ticker"] = ticker
#                 data["create_time"] = utl.Utility.current_utc_time()
#                 data["type_signal"] = qs_str_n_three.type_signal
#                 data["strategy_name"] = strategy_name
#                 data["strategy_level_value"] = qs_str_n_three.candle_x2_value
#                 data["strategy_level_name"] = qs_str_n_three.candle_x2_name
#                 data["time_signal"] = qs_str_n_three.candle_x2_time
#                 data["last_price"] = candle_close
#                 data["update_time"] = utl.Utility.current_utc_time()
#                 data["update_minute"] = int(utl.Utility.current_utc_time().strftime("%M"))
# 
#                 if qs_str_n_three.type_signal == "–õ–æ–Ω–≥":
#                     data["limit_value"] = float('{:.2f}'.format(qs_str_n_three.candle_x2_value * 1.001))
#                     data["stop_loss_value"] = float('{:.2f}'.format(data["limit_value"] * 0.997))
#                 elif qs_str_n_three.type_signal == "–®–æ—Ä—Ç":
#                     data["limit_value"] = float('{:.2f}'.format(qs_str_n_three.candle_x2_value * 0.999))
#                     data["stop_loss_value"] = float('{:.2f}'.format(data["limit_value"] * 1.003))
# 
#                 with Session(autoflush=False, bind=engine) as db:
#                     tom = DB_str_trading_simulate(**data)
#                     db.add(tom)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥
#                     db.commit()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
# 
#                 with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#                     qs_ticker_for_trading = db.query(dbmain.DB_str_trading_simulate).filter(
#                         dbmain.DB_str_trading_simulate.date == utl.Utility.current_date(),
#                         dbmain.DB_str_trading_simulate.ticker == ticker).first()
# 
#         with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#             qs_ticker_for_trading = db.query(dbmain.DB_str_trading_simulate).filter(
#                 dbmain.DB_str_trading_simulate.date == utl.Utility.current_date(),
#                 dbmain.DB_str_trading_simulate.ticker == ticker,
#                 dbmain.DB_str_trading_simulate.trade_out_value == None
# 
#             ).first()
# 
#         # –ï—Å–ª–∏ –ø–æ —Ç–∏–∫–µ—Ä—É –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Å–¥–µ–ª–æ–∫
#         if not qs_ticker_for_trading:
#             return False
# 
#         # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –≤—ã—à–µ–ª –∏–∑ —Å–¥–µ–ª–∫–∏
#         # if qs_ticker_for_trading.trade_out_time:
#         #     utl.Utility.otladka_print(
#         #         txt=f"{rus_name} ({ticker}) –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –≤—ã—à–µ–ª –∏–∑ —Å–¥–µ–ª–∫–∏",
#         #         lvl=2,
#         #         ticker=ticker)
#         #     return False
# 
#         # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ delta price
#         if qs_ticker_for_trading.type_signal == "–õ–æ–Ω–≥":
#             delta_price = 100 * ((candle_close - qs_ticker_for_trading.limit_value) / candle_close)
#         elif qs_ticker_for_trading.type_signal == "–®–æ—Ä—Ç":
#             delta_price = 100 * ((qs_ticker_for_trading.limit_value - candle_close) / qs_ticker_for_trading.limit_value)
#         delta_price = float('{:.2f}'.format(delta_price))
#         for _ in [['delta_price', delta_price],
#                   ['last_price', candle_close],
#                   ['update_time', utl.Utility.current_utc_time()],
#                   ['update_minute', int(utl.Utility.current_utc_time().strftime("%M"))]
#                   ]:
#             dbscripts.db_update_cell_by_id(dbmain.DB_str_trading_simulate, qs_ticker_for_trading.id, _[0], _[1])
# 
#         # –í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É
#         if not qs_ticker_for_trading.trade_in_value:
#             if (high >= qs_ticker_for_trading.limit_value and qs_ticker_for_trading.type_signal == "–õ–æ–Ω–≥") or\
#                 (low <= qs_ticker_for_trading.limit_value and qs_ticker_for_trading.type_signal == "–®–æ—Ä—Ç")\
#             :
#                 utl.Utility.otladka_print(
#                     txt=f"{rus_name} ({ticker}) –í—Ö–æ–∂—É –≤ —Å–¥–µ–ª–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ {qs_ticker_for_trading.limit_value}",
#                     lvl=2,
#                     ticker=ticker)
# 
#                 type_round = {"–õ–æ–Ω–≥": "üü¢", "–®–æ—Ä—Ç": "üî¥"}
#                 type_move_short = {"–õ–æ–Ω–≥": "üîº", "–®–æ—Ä—Ç": "üîΩ"}
# 
#                 msg = f"<u>–í—Ö–æ–∂—É –≤ —Å–¥–µ–ª–∫—É –≤ {qs_ticker_for_trading.type_signal} –æ—Ç —É—Ä–æ–≤–Ω—è {qs_ticker_for_trading.limit_value}\n\n</u>"\
#                       f"<b>{rus_name} ({ticker}) :: {qs_ticker_for_trading.type_signal} {type_round[qs_ticker_for_trading.type_signal]}</b>\n\n" \
#                       f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {candle_close} {type_move_short[qs_ticker_for_trading.type_signal]}</b>" \
# 
# 
#                 # print(msg)
#                 #
#                 # if not utl.Utility.send_msg_to_group(msg):
#                 #     utl.Utility.otladka_print(
#                 #         txt=f"üî¥üî¥üî¥üî¥ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
#                 #         lvl=0, ticker=ticker)
# 
# 
#                 for _ in [['trade_in_value', qs_ticker_for_trading.limit_value],
#                           ['trade_in_time', utl.Utility.current_utc_time()]
#                           ]:
#                     dbscripts.db_update_cell_by_id(dbmain.DB_str_trading_simulate, qs_ticker_for_trading.id, _[0], _[1])
#                 with tinkoffmain.Session(autoflush=False, bind=dbmain.engine) as db:
#                     qs_ticker_for_trading = db.query(dbmain.DB_str_trading_simulate).filter(
#                         dbmain.DB_str_trading_simulate.date == utl.Utility.current_date(),
#                         dbmain.DB_str_trading_simulate.ticker == ticker).first()
# 
#             # –î–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –≤–æ—à–µ–ª –≤ —Å–¥–µ–ª–∫—É
#             else:
#                 return False
# 
#         # –°—Ç–æ–ø –ª–æ—Å—Å
#         if low <= qs_ticker_for_trading.stop_loss_value and qs_ticker_for_trading.type_signal == "–õ–æ–Ω–≥":
#             utl.Utility.otladka_print(
#                 txt=f"{rus_name} ({ticker}) –°—Ç–æ–ø –ª–æ—Å—Å {qs_ticker_for_trading.stop_loss_value} ({float('{:.2f}'.format(100 * ((qs_ticker_for_trading.trade_in_value - qs_ticker_for_trading.stop_loss_value) / qs_ticker_for_trading.trade_in_value)))}%)",
#                 lvl=2,
#                 ticker=ticker)
# 
#             type_round = {"–õ–æ–Ω–≥": "üü¢", "–®–æ—Ä—Ç": "üî¥"}
#             type_move_short = {"–õ–æ–Ω–≥": "üîº", "–®–æ—Ä—Ç": "üîΩ"}
# 
#             msg = f"üî¥ –°—Ç–æ–ø-–ª–æ—Å—Å —Å–æ—Å—Ç–∞–≤–∏–ª {float('{:.2f}'.format(100 * ((qs_ticker_for_trading.trade_in_value - qs_ticker_for_trading.stop_loss_value) / qs_ticker_for_trading.trade_in_value)))}%" \
#                   f"<b>{rus_name} ({ticker}) :: {qs_ticker_for_trading.type_signal}</b>\n\n" \
#                   f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {candle_close} {type_move_short[qs_ticker_for_trading.type_signal]}</b>\n\n" \
#                   f"–°—Ç–æ–ø-–ª–æ—Å—Å –ø–æ —Å–¥–µ–ª–∫–µ –≤ {qs_ticker_for_trading.type_signal} –æ—Ç —É—Ä–æ–≤–Ω—è {qs_ticker_for_trading.limit_value}\n"\
# 
# 
#             # print(msg)
#             #
#             # if not utl.Utility.send_msg_to_group(msg):
#             #     utl.Utility.otladka_print(
#             #         txt=f"üî¥üî¥üî¥üî¥ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
#             #         lvl=0, ticker=ticker)
# 
#             for _ in [['trade_out_value', qs_ticker_for_trading.stop_loss_value],
#                       ['trade_out_time', utl.Utility.current_date()],
#                       ['percent_loss', float('{:.2f}'.format(100 * ((qs_ticker_for_trading.trade_in_value - qs_ticker_for_trading.stop_loss_value) / qs_ticker_for_trading.trade_in_value)))]
#                       ]:
#                 dbscripts.db_update_cell_by_id(dbmain.DB_str_trading_simulate, qs_ticker_for_trading.id, _[0], _[1])
#             return False
#         elif high >= qs_ticker_for_trading.stop_loss_value and qs_ticker_for_trading.type_signal == "–®–æ—Ä—Ç":
#             utl.Utility.otladka_print(
#                 txt=f"{rus_name} ({ticker}) –°—Ç–æ–ø –ª–æ—Å—Å {qs_ticker_for_trading.stop_loss_value} ({float('{:.2f}'.format(100 * ((qs_ticker_for_trading.stop_loss_value - qs_ticker_for_trading.trade_in_value) / qs_ticker_for_trading.stop_loss_value)))}%)",
#                 lvl=2,
#                 ticker=ticker)
#             for _ in [['trade_out_value', qs_ticker_for_trading.stop_loss_value],
#                       ['trade_out_time', utl.Utility.current_date()],
#                       ['percent_loss', float('{:.2f}'.format(100 * ((qs_ticker_for_trading.stop_loss_value - qs_ticker_for_trading.trade_in_value) / qs_ticker_for_trading.stop_loss_value)))]
#                       ]:
#                 dbscripts.db_update_cell_by_id(dbmain.DB_str_trading_simulate, qs_ticker_for_trading.id, _[0], _[1])
#             return False
# 
#         # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ü–µ–Ω—ã
#         data = {}
#         if qs_ticker_for_trading.type_signal == "–õ–æ–Ω–≥" and (
#                 (qs_ticker_for_trading.max_price and qs_ticker_for_trading.max_price < high) or
#                 not qs_ticker_for_trading.max_price
#         ):
#             utl.Utility.otladka_print(
#                 txt=f"{rus_name} ({ticker}) –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å {high} ({float('{:.2f}'.format(100 * ((high - qs_ticker_for_trading.trade_in_value) / high)))}%)",
#                 lvl=2,
#                 ticker=ticker)
#             for _ in [['max_price', high],
#                       ['percent_win', float('{:.2f}'.format(100 * ((high - qs_ticker_for_trading.trade_in_value) / high)))]
#                       ]:
#                 dbscripts.db_update_cell_by_id(dbmain.DB_str_trading_simulate, qs_ticker_for_trading.id, _[0], _[1])
#         elif qs_ticker_for_trading.type_signal == "–®–æ—Ä—Ç" and (
#                 (qs_ticker_for_trading.max_price and low < qs_ticker_for_trading.max_price) or
#                 not qs_ticker_for_trading.max_price
#         ):
#             utl.Utility.otladka_print(
#                 txt=f"{rus_name} ({ticker}) –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å {low} ({float('{:.2f}'.format(100 * ((qs_ticker_for_trading.trade_in_value - low) / qs_ticker_for_trading.trade_in_value)))}%)",
#                 lvl=2,
#                 ticker=ticker)
#             for _ in [['max_price', low],
#                       ['percent_win', float('{:.2f}'.format(100 * ((qs_ticker_for_trading.trade_in_value - low) / qs_ticker_for_trading.trade_in_value)))]
#                       ]:
#                 dbscripts.db_update_cell_by_id(dbmain.DB_str_trading_simulate, qs_ticker_for_trading.id, _[0], _[1])
# 
#         # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–ø–∞ –ª–æ—Å—Å–∞ –≤ –±/—É, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –¥–∞–ª—å—à–µ +0,6%
#         if qs_ticker_for_trading.percent_win and qs_ticker_for_trading.percent_win >= 0.6 and qs_ticker_for_trading.stop_loss_value != qs_ticker_for_trading.limit_value:
#             utl.Utility.otladka_print(
#                 txt=f"{rus_name} ({ticker}) –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–ø–∞ –≤ –±/—É, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —É—à–ª–∞ –¥–∞–ª—å—à–µ +0,6%",
#                 lvl=2,
#                 ticker=ticker)
#             for _ in [['stop_loss_value',  qs_ticker_for_trading.limit_value]
#                       ]:
#                 dbscripts.db_update_cell_by_id(dbmain.DB_str_trading_simulate, qs_ticker_for_trading.id, _[0], _[1])
#             return False
