import scripts.settings as stngs
import bot_trading.lib.utilities.main_utilities as utl
import bot_trading.lib.tinkoff.tinkoff_main as tinkoffmain
import bot_trading.lib.db.db_main as dbmain
import bot_trading.lib.db.db_scripts as dbscripts
from datetime import datetime

class Strategy:
    @staticmethod
    def strategy_flat_simple(obj, type_str, signal_in, current_value):
        """
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–∫–æ–≤–∏–∫

        :param obj:
        :param type_str:
        :param signal_in:
        :param current_value:
        :return:
        """

        if type_str == 'long' and \
                current_value > signal_in and \
                not obj.get_open_orders():

            if obj.open_ticket_buy():

                obj.set_open_orders(True)
                msg = f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª —Å–¥–µ–ª–∫—É. –ö—É–ø–∏–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Orders open_orders = {obj.open_orders}"
                # Files("txt\\test1.txt", "+a").write_file(msg)

                #### –û—Ç–ª–∞–¥–∫–∞ ####
                if stngs.Settings.Development.otladka:
                    utl.Utility.otladka_print(type_msg=2, txt=msg, end="\n\n")
                    pass
            else:
                utl.Utility.otladka_print(type_msg=2, txt=f"–ù–µ —Å—Ç–∞–ª –ø–æ–∫—É–ø–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏",
                                      end="\n\n")

        elif type_str == 'short' and \
                current_value < signal_in and \
                not obj.get_open_orders():

            if obj.open_ticket_sell():
                obj.set_open_orders(True)
                msg = f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª —Å–¥–µ–ª–∫—É. –ü—Ä–æ–¥–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Orders open_orders = {obj.open_orders}"
                # Files("txt\\test1.txt", "+a").write_file(msg)
                utl.Utility.otladka_print(type_msg=2, txt=msg, end="\n\n") if stngs.Settings.Development.otladka else None
            else:
                utl.Utility.otladka_print(type_msg=2, txt=f"–ù–µ —Å—Ç–∞–ª –ø—Ä–æ–¥–∞–≤–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏",
                                      end="\n\n")

        elif obj.get_open_orders():
            utl.Utility.otladka_print(type_msg=2, txt=f"–ù–µ –≤—Ö–æ–∂—É –≤ —Å–¥–µ–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å –æ–¥–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è",
                                  end="\n\n")

    class
    @staticmethod
    def strategy_num_one(ticker, candle_close=0, rus_name="", start_time=""):
        lenght_candle = 0.001
        price_ticker = 1
        utl.Utility.otladka_print(txt="–ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–æ–º–µ—Ä 1", lvl=2)
        pass_reason = 0
        start_at_session = stngs.Settings.Strategies.Strategy_num_one_settings.trading_only_at_session == 1



        # –≤—ã–±–æ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
            qs_num_one = db.query(dbmain.DB_str_n_one).filter(dbmain.DB_str_n_one.ticker == ticker).first()

        # –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∏–∫–µ—Ä–æ–º, —Ç–æ —Å–æ–∑–¥–∞—Ç—å –µ–µ
        if not qs_num_one:
            with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
                # print(db.query(dbmain.Signals).filter(dbmain.Signals.ticker == ticker).first().__dict__)
                query_signals = db.query(dbmain.Signals).filter(dbmain.Signals.ticker == ticker).first()

            level_in = query_signals.level_in
            with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
                query = dbmain.DB_str_n_one(ticker=ticker, level_in=level_in, type_signal=query_signals.type_signal, last_update=utl.Utility.current_utc_time())
                db.add(query)
                db.commit()
            # –≤—ã–±–æ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
                qs_num_one = db.query(dbmain.DB_str_n_one).filter(
                    dbmain.DB_str_n_one.ticker == ticker).first()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        if start_at_session and int(utl.Utility.current_utc_time().strftime("%H")) < 7:
            return False

        timedif = utl.Utility.current_utc_time() - datetime.strptime(qs_num_one.last_update, "%Y-%m-%d %H:%M:%S.%f%z")
        utl.Utility.otladka_print(txt=f"–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Å—Ç–∞–≤–ª–µ—Ç {timedif.total_seconds()} —Å–µ–∫—É–Ω–¥", lvl=2)

        # cur_hour =
        # cur_min =

        if not qs_num_one.pass_reason and timedif.total_seconds() > 55:
            level_in = qs_num_one.level_in

            # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å–≤–µ—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ close
            with tinkoffmain.Session(autoflush=False, bind=tinkoffmain.engine) as db:
                qs_candle_close = db.query(dbmain.DB_str_n_one).filter(dbmain.DB_str_n_one.ticker == ticker).first()
                play = 1
                candle = 1
                while play:
                    if qs_candle_close.__dict__['candle_close_'+str(candle)]:
                        candle += 1
                    else:
                        setattr(qs_candle_close, 'candle_close_'+str(candle), candle_close)
                        db.commit()
                        play = 0
            ############# 1 —Å–≤–µ—á–∞
            if candle == 1:
                utl.Utility.otladka_print(txt=f"{rus_name} ({ticker}) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 1—É—é —Å–≤–µ—á—É", lvl=2)
                dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'last_update',
                                         utl.Utility.current_utc_time())
                if candle_close > level_in:
                    pass
                else:
                    pass_reason = "–ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –≤—Ö–æ–¥–∞"
                    dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'pass_reason', pass_reason)
                    pass

            ############# 2 —Å–≤–µ—á–∞
            elif candle == 2:
                utl.Utility.otladka_print(txt=f"{rus_name} ({ticker}) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 2—É—é —Å–≤–µ—á—É", lvl=2)
                dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'last_update',
                                         utl.Utility.current_utc_time())
                if candle_close < level_in:
                    pass
                else:
                    pass_reason = "–í—Ç–æ—Ä–∞—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –≤—Ö–æ–¥–∞"
                    dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'pass_reason', pass_reason)
                    pass
            ############# 3 —Å–≤–µ—á–∞
            elif candle == 3:
                utl.Utility.otladka_print(txt=f"{rus_name} ({ticker}) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 3—å—é —Å–≤–µ—á—É", lvl=2)
                dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'last_update',
                                         utl.Utility.current_utc_time())
                delta_atr = 0.008
                if candle_close < level_in and lenght_candle / price_ticker <= delta_atr:
                    msg = f"<b>{rus_name} ({ticker})</b>\n" \
                          f"{qs_num_one.type_signal} üü¢\n\n" \
                          f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {candle_close}    (—É—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞: {level_in})\n" \
                          f"–¶–µ–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –ø—Ä–æ–±–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞ {level_in} —Å–Ω–∏–∑—É-–≤–≤–µ—Ä—Ö üîº. \n" \
                          f"–ü–æ–¥–≥–æ—Ç–æ–≤—Ç–µ—Å—å –∫ —Å–¥–µ–ª–∫–µ. \n\n" \
                          f"<i>(–°–≤–µ—á–∞ 3)</i>"

                    print(msg)
                    utl.Utility.send_msg_to_group(msg)
                else:
                    if candle_close >= level_in:
                        pass_reason = "–¢—Ä–µ—Ç—å—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –≤—Ö–æ–¥–∞"
                        dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'pass_reason', pass_reason)
                    elif lenght_candle / price_ticker > delta_atr:
                        pass_reason = f"–ê–¢–† —Ç—Ä–µ—Ç—å–µ–π —Å–≤–µ—á–∏ –±–æ–ª—å—à–µ {delta_atr*100}%"
                        dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'pass_reason', pass_reason)
            ############# 4 —Å–≤–µ—á–∞
            elif candle == 4:
                utl.Utility.otladka_print(txt=f"{rus_name} ({ticker}) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 4—É—é —Å–≤–µ—á—É", lvl=2)
                delta_atr = 0.006
                dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'last_update',
                                         utl.Utility.current_utc_time())
                if candle_close < level_in and lenght_candle / price_ticker <= delta_atr:
                    msg = f"<b>{rus_name} ({ticker})</b>\n" \
                          f"{qs_num_one.type_signal} üü¢\n\n" \
                          f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {candle_close}    (—É—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞: {level_in})\n" \
                          f"–¶–µ–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –ø—Ä–æ–±–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞ {level_in} —Å–Ω–∏–∑—É-–≤–≤–µ—Ä—Ö üîº. \n" \
                          f"–ü–æ–¥–≥–æ—Ç–æ–≤—Ç–µ—Å—å –∫ —Å–¥–µ–ª–∫–µ. \n\n" \
                          f"<i>(–°–≤–µ—á–∞ 4)</i>"
                    print(msg)
                    utl.Utility.send_msg_to_group(msg)
                else:
                    if candle_close >= level_in:
                        pass_reason = "–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –≤—Ö–æ–¥–∞"
                        dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'pass_reason', pass_reason)
                    elif lenght_candle / price_ticker > delta_atr:
                        pass_reason = f"–ê–¢–† —á–µ—Ç–≤–µ—Ä—Ç–æ–π —Å–≤–µ—á–∏ –±–æ–ª—å—à–µ {delta_atr*100}%"
                        dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'pass_reason', pass_reason)
            ############# 5 —Å–≤–µ—á–∞
            elif candle == 5:
                utl.Utility.otladka_print(txt=f"{rus_name} ({ticker}) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 5—É—é —Å–≤–µ—á—É", lvl=2)
                dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'last_update',
                                         utl.Utility.current_utc_time())
                if candle_close >= level_in:
                    msg = f"{rus_name} ({ticker}): –°–≤–µ—á–∞ 5 –ø—Ä–æ–±–∏–ª–∞ —É—Ä–æ–≤–µ–Ω—å. –í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É - —É—Å–ø–µ—à–Ω—ã–π."
                    print(msg)
                    utl.Utility.send_msg_to_group(msg)
                else:
                    pass_reason = "–ü—è—Ç–∞—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –≤—Ö–æ–¥–∞"
                    dbscripts.db_update_cell(dbmain.DB_str_n_one, ticker, 'pass_reason', pass_reason)
        else:
            utl.Utility.otladka_print(txt=f"–ù–µ —Å—Ç–∞–ª –∑–∞—Ö–æ–¥–∏—Ç—å –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –±—É–º–∞–≥–∞ —É–∂–µ –≤—ã—à–ª–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", lvl=2)

        return True

